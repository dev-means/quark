// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package quark

import (
  json "encoding/json"
  easyjson "github.com/mailru/easyjson"
  jlexer "github.com/mailru/easyjson/jlexer"
  jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
  _ *json.RawMessage
  _ *jlexer.Lexer
  _ *jwriter.Writer
  _ easyjson.Marshaler
)

func easyjson8668c430DecodeHomeMasterSourceDevMeansSrc(in *jlexer.Lexer, out *AccessToken) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
      in.Skip()
      in.WantComma()
      continue
    }
    switch key {
    case "N":
      out.N = int64(in.Int64())
    case "E":
      out.E = int64(in.Int64())
    case "D":
      out.D = string(in.String())
    default:
      in.SkipRecursive()
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjson8668c430EncodeHomeMasterSourceDevMeansSrc(out *jwriter.Writer, in AccessToken) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"N\":"
    out.RawString(prefix[1:])
    out.Int64(int64(in.N))
  }
  {
    const prefix string = ",\"E\":"
    out.RawString(prefix)
    out.Int64(int64(in.E))
  }
  {
    const prefix string = ",\"D\":"
    out.RawString(prefix)
    out.String(string(in.D))
  }
  out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccessToken) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjson8668c430EncodeHomeMasterSourceDevMeansSrc(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccessToken) MarshalEasyJSON(w *jwriter.Writer) {
  easyjson8668c430EncodeHomeMasterSourceDevMeansSrc(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccessToken) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjson8668c430DecodeHomeMasterSourceDevMeansSrc(&r, v)
  return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccessToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjson8668c430DecodeHomeMasterSourceDevMeansSrc(l, v)
}
